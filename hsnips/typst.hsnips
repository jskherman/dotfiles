# Define contexts for use
# Use `> Inspect Editor Tokens and Scopes` to find out what context you're in
global
function math(context) { return context.scopes.some(s => s.startsWith("string.other.math"));}
function comment(context) {return context.scopes.some(s => s.startsWith("comment"));}
function code(context) {return context.scopes.some(s => s.startsWith("meta.block.code"));}
endglobal


# Define vscode variables for use
global
const vscode = require("vscode");
var editor = vscode.window.activeTextEditor
var document = editor.document
endglobal

# Define "visual" $TM_SELECTED_TEXT variable
global
let visual = "";
vscode.window.onDidChangeTextEditorSelection((e) => {
    const newSelectedText = e.textEditor.document.getText(e.selections[0]);
    if (newSelectedText) {
        visual = newSelectedText.replace(/\\\\/g,"\\\\\\ ").replace(/\}/g,"\\}");
    }
});
endglobal


############# TEXT #############
### DATES ### 
snippet day "Current flag number" w
``rv = Math.floor((new Date() - new Date("May 29, 2001")) / (1000 * 60 * 60 * 24));``
endsnippet

snippet dtt "Current time" wA
``rv = "\`" + new Date().toLocaleTimeString([], {hour: "2-digit", minute:"2-digit", hour12: false}) + "\`"`` $0
endsnippet

snippet ddd "Current date" w
``rv = new Date().toISOString().slice(0,10)``
endsnippet

snippet ddt "Current date and time" wA
``var currentDate = new Date();
var isoString = currentDate.getFullYear() +
    '-' + (currentDate.getMonth() + 1).toString().padStart(2, '0') +
    '-' + currentDate.getDate().toString().padStart(2, '0') +
    'T' + currentDate.getHours().toString().padStart(2, '0') +
    ':' + currentDate.getMinutes().toString().padStart(2, '0') +
    ':' + currentDate.getSeconds().toString().padStart(2, '0') +
    '+08:00'
rv = isoString``
endsnippet

############# REGULAR MODE #############

snippet pac "Package" b
#import "@preview/${1:package}:${2:ver}": $0
endsnippet

snippet ftbl "Table figure" b
#figure(
  table(
    columns: (${3:c}),
    align: (${4:auto}),
    $0
  ),
  caption: [${1:caption}],
) <tbl-${2:label}>
endsnippet

snippet fimg "Image figure" b
#figure(
  image("$0", width: ${3:auto}, height: ${4:auto}),
  caption: [${1:caption}],
) <fig-${2:label}>
endsnippet

snippet fcode "Code figure" b
#figure(
  caption: [${1:caption}],
)[
\`\`\`${3:lang}
$0
\`\`\`
] <code-${2:label}>
endsnippet

snippet terml "Term list" bA
/ ${1:Term}: ${0:description}
endsnippet

snippet `tbl(\d+)x(\d+)` "Create table cells" wA
``rv = ('[], '.repeat(m[2]) + '\n').repeat(m[1])``
endsnippet


############# MATH MODE #############
# Ported from https://castel.dev/post/lecture-notes-1/#inline-and-display-math
# Insert inline math block
snippet mk "Inline Math" wA
$${1:``rv=visual``}$ $0
endsnippet


# Ported from https://castel.dev/post/lecture-notes-1/#inline-and-display-math
# Insert display math block
snippet dm "Display Math" wA
$ ${1:``rv=visual``} $ $0
endsnippet


### Subscripts ###
context math(context)
snippet `([A-Za-z])(\d)` "auto subscript" wA
``rv = m[1];``_``rv = m[2]``
endsnippet

context math(context)
snippet `([A-Za-z])_(\d\d)` "auto subscript2" wA
``rv = m[1]``_(``rv = m[2]``)
endsnippet

context math(context)
snippet __ "subscript" iA
_($1)$0
endsnippet

context math(context)
snippet `(?<!i)tss` "text subscript" iA
_("$1") $0
endsnippet

### Superscripts ###1
context math(context)
snippet sr "^2" iA
^2
endsnippet

context math(context)
snippet cb "^3" iA
^3
endsnippet

context math(context)
snippet invs "inverse" iA
^(-1)
endsnippet

context math(context)
snippet sq "\sqrt{}" iA
sqrt(${1:``rv=visual``}) $0
endsnippet

context math(context)
snippet compl "complement" iA
^(complement)
endsnippet

context math(context)
snippet td "to the ... power / superscript" iA
^($1)$0
endsnippet

context math(context)
snippet rd "to the ... power / superscript" iA
^($1)$0
endsnippet

### Decorators ###
context math(context)
snippet conj "conjugate" iA
overline($1)$0
endsnippet

priority 10
context math(context)
snippet bar "bar" iA
overline($1)$0
endsnippet

priority 100
context math(context)
snippet `([a-zA-Z])bar` "bar" iA
overline(``rv=m[1]``)
endsnippet

# context math(context)
# snippet box "conjugate" iA
# \boxed{${1:``rv=visual``}}$0
# endsnippet

priority 200
context math(context)
snippet hbar "bar" iA
planck.reduce
endsnippet

priority 10
context math(context)
snippet hat "hat" iA
hat($1)$0
endsnippet

priority 100
context math(context)
snippet `([a-zA-Z])hat` "hat" iA
hat(``rv=m[1]``)
endsnippet



### Fractions ###
# // -> \frac{}{}
context math(context)
snippet // "Fraction" iA
($1)/($2)$0
endsnippet

# context math(context)
# snippet / "Fraction" i
# (``rv=visual``)/($1)$0
# endsnippet

# 3/        ->	\frac{3}{}
# 4\pi^2/   ->	\frac{4\pi^2}{}
context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction" wA
(``rv = m[1]``)/($1)$0
endsnippet

# (1+(2+3)/)    ->  (1 + \frac{2+3}{})
# (1 + (2+3))/  ->  \frac{1 + (2+3)}{}
priority 1000
context math(context)
snippet `^.*\)/` "() Fraction" wA
``
let stripped = m[0].slice(0, -1);
let depth = 0;
let i = stripped.length - 1;
while (true) {
    if (stripped[i] == ')') depth += 1;
    if (stripped[i] == '(') depth -= 1;
    if (depth == 0) break;
    i -= 1;
}
rv = stripped.slice(0, i) + "(" + stripped.slice(i+1, -1) + ")";
``/($1)$0
endsnippet


### Environments ###
context math(context)
snippet pmat "pmat" iA
mat(delim: "(", $1) $0
endsnippet

context math(context)
snippet bmat "bmat" iA
mat(delim: "[", $1) $0
endsnippet

context math(context)
snippet case "cases" wA
cases(
    $1
) $0
endsnippet

context math(context)
snippet cvec "column vector" iA
vec(${1:x}_${2:1}, dots.v, $1_${2:n})
endsnippet


### Equators, Operators ###
priority 100
snippet ... "ldots" iA
#sym.dots.h
endsnippet

context math(context)
snippet == "equals" iA
&= $1 \\
endsnippet

# context math(context)
# snippet ~~ "~" iA
# \sim 
# endsnippet

context math(context)
snippet xx "cross" iA
times 
endsnippet

priority 100
context math(context)
snippet ** "cdot" iA
dot 
endsnippet

# context math(context)
# snippet !> "mapsto" iA
# \mapsto 
# endsnippet

# context math(context)
# snippet \\\ "setminus" iA
# \setminus
# endsnippet

# context math(context)
# snippet || "mid" iA
#  \mid 
# endsnippet

# context math(context)
# snippet cc "subset" Ai
# \subset 
# endsnippet

context math(context)
snippet notin "not in " iA
in.not 
endsnippet

# context math(context)
# snippet inn "in " iA
# \in 
# endsnippet

# context math(context)
# snippet Nn "cap" iA
# \cap 
# endsnippet

# context math(context)
# snippet UU "cup" iA
# \cup 
# endsnippet

# context math(context)
# snippet uuu "bigcup" iA
# \bigcup_{${1:i \in ${2: I}}} $0
# endsnippet

# context math(context)
# snippet nnn "bigcap" iA
# \bigcap_{${1:i \in ${2: I}}} $0
# endsnippet

# context math(context)
# snippet <! "normal" iA
# \triangleleft 
# endsnippet

# context math(context)
# snippet <> "hokje" iA
# \diamond 
# endsnippet


### Brackets, Delimiters ###
context math(context)
snippet ceil "ceil" iA
ceil($1) $0
endsnippet

context math(context)
snippet floor "floor" iA
floor($1) $0
endsnippet

context math(context)
snippet round "floor" iA
round($1) $0
endsnippet

context math(context)
snippet norm "norm" iA
norm($1) $0
endsnippet

context math(context)
snippet abs "abs" iA
abs($1) $0
endsnippet

context math(context)
snippet lr "left( right)" i
lr( ${1:``rv=visual``} ) $0
endsnippet

context math(context)
snippet lr( "left( right)" i
lr(( ${1:``rv=visual``} )) $0
endsnippet

context math(context)
snippet lr| "left| right|" i
lr(abs( ${1:``rv=visual``} )) $0
endsnippet

context math(context)
snippet lr{ "left\{ right\}" i
lr({ ${1:``rv=visual``} }) $0
endsnippet

context math(context)
snippet lrb "left\{ right\}" i
lr({ ${1:``rv=visual``} }) $0
endsnippet

context math(context)
snippet lr[ "left[ right]" i
lr([ ${1:``rv=visual``} ]) $0
endsnippet

context math(context)
snippet lra "leftangle rightangle" iA
lr(angle.l ${1:``rv=visual``} angle.r) $0
endsnippet

# context math(context)
# snippet set "set" wA
# \\{$1\\} $0
# endsnippet


### Functions ###
context math(context)
snippet sum "sum" w
sum_(n=${1:1})^(${2:infinity}) ${3:a_n z^n}
endsnippet

context math(context)
snippet taylor "taylor" w
sum_(${1:k}=${2:0})^(${3:infinity}) ${4:c_$1} (x-a)^$1 $0
endsnippet

context math(context)
snippet lim "limit" w
lim_(${1:n} -> ${2:infinity}) 
endsnippet

context math(context)
snippet prod "product" w
product_(${1:n=${2:1}})^(${3:infinity}) ${4:``rv=visual``} $0
endsnippet

context math(context)
snippet part "d/dx" w
(diff ${1})/(diff ${2:x}) $0
endsnippet

context math(context)
snippet ddp "d/dx" wA
(diff ${1})/(diff ${2:x}) $0
endsnippet

context math(context)
snippet ddx "d/dx" wA
(d ${1})/(d ${2:x}) $0
endsnippet

context math(context)
snippet la+ "Laplace" iA
cal(L) lr({ $1 }) $0
endsnippet

priority 300
context math(context)
snippet iint "integral" wA
integral_(${1:-infinity})^(${2:infinity}) ${3:``rv=visual``} $0
endsnippet

context math(context)
snippet tt "text" iA
"$1"$0
endsnippet


### Symbols ###
context math(context)
snippet xnn "x_n" iA
x_(n)
endsnippet

context math(context)
snippet ynn "y_n" iA
y_(n)
endsnippet

context math(context)
snippet xii "x_i" iA
x_(i)
endsnippet

context math(context)
snippet yii "y_i" iA
y_(i)
endsnippet

context math(context)
snippet xjj "x_j" iA
x_(j)
endsnippet

context math(context)
snippet yjj "y_j" iA
y_(j)
endsnippet

context math(context)
snippet xp1 "x_n+1" iA
x_(n+1)
endsnippet

context math(context)
snippet xmm "x_m" iA
x_(m)
endsnippet


### Characters ###
context math(context)
snippet mcal "mathcal" iA
cal($1)$0
endsnippet

context math(context)
snippet nabl "nabla" iA
nabla
endsnippet

context math(context)
snippet OO "emptyset" iA
diameter
endsnippet

context math(context)
snippet null "emptyset" i
diameter
endsnippet

