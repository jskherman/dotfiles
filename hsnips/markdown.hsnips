# Define contexts for use
# Use `> Inspect Editor Tokens and Scopes` to find out what context you're in
global
function inlineMath(context) { return context.scopes.some(s => s.startsWith("markup.math.inline.markdown"));}
function displayMath(context) { return context.scopes.some(s => s.startsWith("markup.math.block.markdown")); }
function math(context) { return inlineMath(context) || displayMath(context); }
endglobal

############# MATH #############
# Ported from https://castel.dev/post/lecture-notes-1/#inline-and-display-math
# Insert inline math block
snippet mk "Inline math" wA
$${1}$${0}
endsnippet

# Ported from https://castel.dev/post/lecture-notes-1/#inline-and-display-math
# Insert display math block
snippet dm "Display Math" wA
$$
${1}
$$

$0
endsnippet

snippet beg "begin{} / end{}" bA
\begin{$1}
	$0
\end{$1}
endsnippet

### Subscripts ###
context math(context)
snippet `([A-Za-z])(\d)` "auto subscript" wA
``rv = m[1];``_``rv = m[2]``
endsnippet

context math(context)
snippet `([A-Za-z])_(\d\d)` "auto subscript2" wA
``rv = m[1]``_{``rv = m[2]``}
endsnippet

### Superscripts ###
context math(context)
snippet sr "^2" iA
^2
endsnippet

context math(context)
snippet cb "^3" iA
^3
endsnippet

context math(context)
snippet compl "complement" iA
^{c}
endsnippet

context math(context)
snippet rt "superscript" iA
^{$1}$0
endsnippet

### Fractions ###
# // -> \frac{}{}
context math(context)
snippet // "Fraction" iA
\frac{$1}{$2}$0
endsnippet

# 3/        ->	\frac{3}{}
# 4\pi^2/   ->	\frac{4\pi^2}{}
context math(context)
snippet `((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/` "Fraction" wA
\frac{``rv = m[1]``}{$1}$0
endsnippet

# (1+(2+3)/)    ->  (1 + \frac{2+3}{})
# (1 + (2+3))/  ->  \frac{1 + (2+3)}{}
priority 1000
snippet `^.*\)/` "() Fraction" wA
``
let stripped = m[0].slice(0, -1);
let depth = 0;
let i = stripped.length - 1;
while (true) {
    if (stripped[i] == ')') depth += 1;
    if (stripped[i] == '(') depth -= 1;
    if (depth == 0) break;
    i -= 1;
}
rv = stripped.slice(0, i) + "\\frac{" + stripped.slice(i+1, -1) + "}";
``{$1}$0
endsnippet
